name: CMake Build Matrix

# Controls when the action will run. Triggers the workflow on push
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            artifact: "windows_msvc.7z",
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 17 2022"
          }
        # - {
        #     name: "Windows Latest MinGW",
        #     os: windows-latest,
        #     artifact: "windows_mingw.7z",
        #     build_type: "Release",
        #     cc: "gcc",
        #     cxx: "g++",
        #     archiver: "7z a",
        #     generators: "Ninja"
        #   }
        - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
#       - {
#           name: "Ubuntu_GCC_9",
#           os: ubuntu-latest,
#           artifact: "ubuntu_gcc9.7z",
#           build_type: "Release",
#           cc: "gcc",
#           cxx: "g++",
#           archiver: "7z a",
#           generators: "Ninja"
#         }
        - {
            name: "macOS Latest Clang",
            os: macos-latest,
            artifact: "macos_clang.7z",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            archiver: "7za a",
            generators: "Ninja"
          }

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      - name: Install dependencies on Windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake
          ninja --version
          cmake --version
      - name: Set up Python on Windows
        if: startsWith(matrix.config.os, 'windows')
        uses: actions/setup-python@v4
        with:
            python-version: '3.12'
      - name: Install HDF5 on Windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          Invoke-WebRequest -Uri https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-1.12.1/src/CMake-hdf5-1.12.1.zip -OutFile "CMake-hdf5-1.12.1.zip"
          Expand-Archive -Path "CMake-hdf5-1.12.1.zip" -DestinationPath .
          cd CMake-hdf5-1.12.1
          ..\PatchHDF5.bat
          ctest -S HDF5config.cmake,BUILD_GENERATOR=VS202264 -C Release -V -O hdf5.log
          Expand-Archive -Path "HDF5-1.12.1-win64.zip" -DestinationPath .
          cd ..
      - name: Install dependencies on Ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu Latest GCC')
        run: |
          sudo apt-get update
          sudo apt-get install cmake libhdf5-serial-dev libtiff-dev ninja-build python3 python3-pip python3-setuptools python3-wheel
          # python -m pip install --upgrade pip setuptools wheel
          which cmake && cmake --version
          which gcc && gcc --version
          which ninja && ninja --version
          which python && python --version
      - name: Install dependencies on macOS
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install hdf5 libtiff cmake ninja
          python -m pip install --upgrade pip setuptools wheel
          cmake --version
          gcc --version
          ninja --version
          python --version

      - name: Configure Linux
        if: startsWith(matrix.config.name, 'Ubuntu Latest GCC')
        shell: bash
        run: |
          pwd
          cmake \
            -B ${{github.workspace}}/build \
            -D CMAKE_BUILD_TYPE=${{matrix.config.build_type}} \
            -D CMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install \
            -D mcnptools.cpack=ON \
            -D mcnptools.python=ON \
            -D mcnptools.python_install=Prefix

      - name: Configure MacOS
        if: startsWith(matrix.config.os, 'macos')
        shell: bash
        run: |
          pwd
          cmake \
            -B ${{github.workspace}}/build \
            -D CMAKE_BUILD_TYPE=${{matrix.config.build_type}} \
            -D CMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install \
            -D mcnptools.cpack=ON \
            -D mcnptools.python=ON \
            -D mcnptools.python_install=Prefix

      - name: Configure Windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          dir ${{github.workspace}}
          dir ${{github.workspace}}\CMake-hdf5-1.12.1
          dir ${{github.workspace}}\CMake-hdf5-1.12.1\HDF5-1.12.1-win64
          dir ${{github.workspace}}\CMake-hdf5-1.12.1\HDF5-1.12.1-win64\HDF_Group
          dir ${{github.workspace}}\CMake-hdf5-1.12.1\HDF5-1.12.1-win64\HDF_Group\HDF5
          cmake -G "Ninja" -B ${{github.workspace}}/build -D CMAKE_BUILD_TYPE=${{matrix.config.build_type}} -D CMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install -DHDF5_ROOT=${{github.workspace}}/CMake-hdf5-1.12.1/HDF5-1.12.1-win64/HDF_Group/HDF5/1.12.1 -D mcnptools.cpack=ON -D mcnptools.python=ON -D mcnptools.python_install=Prefix

      - name: Build Linux
        if: startsWith(matrix.config.name, 'Ubuntu Latest GCC')
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --build . --config ${{matrix.config.build_type}} -- -j

      - name: Build MacOS
        if: startsWith(matrix.config.os, 'macos')
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --build . --config ${{matrix.config.build_type}} -- -j

      - name: Build Windows
        if: startsWith(matrix.config.os, 'windows')
        working-directory: ${{github.workspace}}/build
        run: cmake --build . --config ${{matrix.config.build_type}} -- -j

      - name: Build Wheel
        working-directory: ${{github.workspace}}/build/python
        run: python setup${{matrix.config.build_type}}.py bdist_wheel

      - name: Test C++
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{matrix.config.BUILD_TYPE}}

      # - name: Test: Python
      #   working-directory: ${{github.workspace}}/build
      #   # Execute tests defined by the CMake configuration.
      #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #   run: |
      #     which python
      #     cmake --build . --config Release -t pytest

      - name: Install Strip
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --install . --config ${{matrix.config.BUILD_TYPE}} --strip

      - name: Pack
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: cpack -G ZIP

      - name: Capture artifacts
        uses: actions/upload-artifact@v4

        with:
            name: mcnptools
            path: |
                ${{github.workspace}}/build/*.zip
                ${{github.workspace}}/build/python/dist/*.whl

      # - name: Pack
      #   shell: bash
      #   working-directory: ${{github.workspace}}/build/install
      #   run: |
      #     ls -laR
      #     ${{ matrix.config.archiver }} ../${{ matrix.config.artifact }} .
      # - name: Upload
      #   uses: actions/upload-artifact@v4
      #   with:
      #     path: ./${{ matrix.config.artifact }}
      #     name: ${{ matrix.config.artifact }}

      # - name: Upload release asset
      #   if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ github.event.release.upload_url }}
      #     asset_path: ./${{ matrix.config.artifact }}
      #     asset_name: ${{ matrix.config.artifact }}.zip
      #     asset_content_type: application/zip
